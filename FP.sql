-- DDL --
CREATE TABLE GENRE (
GENREID NUMBER NOT NULL,
GENRENAME  VARCHAR2(50) NOT NULL,
GENREDESCRIPTION VARCHAR2(300) NOT NULL,
CONSTRAINT PK_GENRE PRIMARY KEY (GENREID)
);

CREATE TABLE ARTIST(
ARTISTID NUMBER NOT NULL,
ARTISTNAME VARCHAR2(100) NOT NULL,
ARTISTSEX CHAR(1) NOT NULL,
ARTISTROLE CHAR(1),
CONSTRAINT PK_ARTIST PRIMARY KEY (ARTISTID)
);

CREATE TABLE "USER"(
USERID NUMBER NOT NULL,
FULLNAME VARCHAR2(100) NOT NULL,
IDCARDNUMBER VARCHAR2(50),
BIRTHDATE DATE,
ADDRESS VARCHAR2(200),
PHONENUMBER VARCHAR2(15),
SEX CHAR(1) NOT NULL,
ACCESSLEVEL CHAR(1) NOT NULL,
EMAIL VARCHAR2(100),
CONSTRAINT PK_USER PRIMARY KEY (USERID)
);

CREATE TABLE PASSWORD(
USERID NUMBER NOT NULL,
PASSWORD VARCHAR2(32) NOT NULL,
CONSTRAINT PK_PASSWORD PRIMARY KEY (USERID),
CONSTRAINT FK_USER_PASSWORD FOREIGN KEY (USERID) REFERENCES "USER"(USERID)
);

CREATE TABLE EVENT(
EVENTID NUMBER NOT NULL,
EVENTNAME VARCHAR2(100),
EVENTDESCRIPTION VARCHAR2(300),
EVENTSTARTDATE DATE,
EVENTENDDATE DATE,
EVENTDISCOUNT NUMBER,
CONSTRAINT PK_EVENT PRIMARY KEY (EVENTID)
);

CREATE TABLE MOVIE(
MOVIEID NUMBER NOT NULL,
MOVIETITLE VARCHAR2(200),
MOVIERELEASEDATE DATE,
MOVIESYNOPSIS VARCHAR2(1024),
MOVIECOVERURL VARCHAR2(200),
MOVIERATING NUMBER,
CONSTRAINT PK_MOVIE PRIMARY KEY (MOVIEID)
);

CREATE TABLE MOVIEGENRE(
MOVIEID NUMBER,
GENREID NUMBER,
CONSTRAINT PK_MOVIEGENRE PRIMARY KEY (MOVIEID, GENREID),
CONSTRAINT FK_MOVIEGENRE_MOVIE FOREIGN KEY (MOVIEID) REFERENCES MOVIE(MOVIEID),
CONSTRAINT FK_MOVIEGENRE_GENRE FOREIGN KEY (GENREID) REFERENCES GENRE(GENREID)
);

CREATE TABLE MOVIEARTIST(
MOVIEID NUMBER,
ARTISTID NUMBER,
CONSTRAINT PK_MOVIEARTIST PRIMARY KEY (MOVIEID, ARTISTID),
CONSTRAINT FK_MOVIEARTIST_MOVIE FOREIGN KEY (MOVIEID) REFERENCES MOVIE(MOVIEID),
CONSTRAINT FK_MOVIEARTIST_ARTIST FOREIGN KEY (ARTISTID) REFERENCES ARTIST(ARTISTID)
);

CREATE TABLE PENALTY(
PENALTYID NUMBER NOT NULL,
PENALTYNAME VARCHAR2(50),
PENALTYFINE NUMBER,
CONSTRAINT PK_PENALTY PRIMARY KEY (PENALTYID)
);

CREATE TABLE CATEGORY(
CATEGORYID NUMBER NOT NULL,
CATEGORYNAME VARCHAR2(50),
CATEGORYPRICE NUMBER,
CONSTRAINT PK_CATEGORY PRIMARY KEY (CATEGORYID)
);

CREATE TABLE CATEGORYPENALTY(
CATEGORYPENALTYID NUMBER NOT NULL,
CATEGORYID NUMBER,
PENALTYID NUMBER,
CONSTRAINT PK_CATEGORYPENALTY PRIMARY KEY (CATEGORYPENALTYID),
CONSTRAINT FK_CATEGORYPENALTY_CATEGORY FOREIGN KEY (CATEGORYID) REFERENCES CATEGORY(CATEGORYID),
CONSTRAINT FK_CATEGORYPENALTY_PENALTY FOREIGN KEY (PENALTYID) REFERENCES PENALTY(PENALTYID)
);

CREATE TABLE DISCTYPE(
DISCTYPEID NUMBER NOT NULL,
DISCTYPENAME VARCHAR2(50),
PRICEMULTIPLIER NUMBER,
CONSTRAINT PK_DISCTYPE PRIMARY KEY (DISCTYPEID)
);

CREATE TABLE DISC(
DISCID NUMBER NOT NULL,
DISCSTATUS CHAR(1),
DISCTOTAL NUMBER,
DISCTYPEID NUMBER,
CATEGORYID NUMBER,
MOVIEID NUMBER,
CONSTRAINT PK_DISC PRIMARY KEY (DISCID),
CONSTRAINT FK_DISC_DISCTYPE FOREIGN KEY (DISCTYPEID) REFERENCES DISCTYPE(DISCTYPEID),
CONSTRAINT FK_DISC_CATEGORY  FOREIGN KEY (CATEGORYID) REFERENCES CATEGORY(CATEGORYID),
CONSTRAINT FK_DISC_MOVIE  FOREIGN KEY (MOVIEID) REFERENCES MOVIE(MOVIEID)
);

CREATE TABLE TRANSACTION(
TRANSACTIONID NUMBER NOT NULL,
TRANSACTIONDATE DATE,
CASHIERID NUMBER,
CUSTOMERID NUMBER,
EVENTID NUMBER,
CONSTRAINT PK_TRANSACTION PRIMARY KEY (TRANSACTIONID),
CONSTRAINT FK_TRANSACTION_CASHIER FOREIGN KEY (CASHIERID) REFERENCES "USER"(USERID),
CONSTRAINT FK_TRANSACTION_CUSTOMER FOREIGN KEY (CUSTOMERID) REFERENCES "USER"(USERID),
CONSTRAINT FK_TRANSACTION_EVENT FOREIGN KEY (EVENTID) REFERENCES EVENT(EVENTID)
);

CREATE TABLE ITEM(
ITEMID NUMBER NOT NULL,
TRANSACTIONID NUMBER,
DISCID NUMBER,
MUSTRETURNTIME DATE,
RETURNTIME DATE,
ITEMPRICE NUMBER,
CONSTRAINT PK_ITEM PRIMARY KEY (ITEMID),
CONSTRAINT FK_ITEM_DISC FOREIGN KEY (DISCID) REFERENCES DISC(DISCID),
CONSTRAINT FK_ITEM_TRANSACTION FOREIGN KEY (TRANSACTIONID) REFERENCES TRANSACTION(TRANSACTIONID)
);

CREATE TABLE PROBLEM(
PROBLEMID NUMBER NOT NULL,
PROBLEMNAME VARCHAR2(100),
PROBLEDESCRIPTION VARCHAR2(300),
USERID NUMBER,
TRANSACTIONID NUMBER,
CONSTRAINT PK_PROBLEM PRIMARY KEY (PROBLEMID),
CONSTRAINT FK_PROBLEM_USER FOREIGN KEY (USERID) REFERENCES "USER"(USERID),
CONSTRAINT FK_PROBLEM_TRANSACTION FOREIGN KEY (TRANSACTIONID) REFERENCES TRANSACTION(TRANSACTIONID)
);

-- AUTO INCREMENT --
CREATE SEQUENCE ARTIST_SEQ;
CREATE OR REPLACE TRIGGER ARTIST_AINC
BEFORE INSERT ON ARTIST
FOR EACH ROW
BEGIN 
  SELECT ARTIST_SEQ.NEXTVAL
  INTO :NEW.ARTISTID
  FROM DUAL;
END;
/

CREATE SEQUENCE GENRE_SEQ;
CREATE OR REPLACE TRIGGER GENRE_AINC
BEFORE INSERT ON GENRE
FOR EACH ROW
BEGIN 
  SELECT GENRE_SEQ.NEXTVAL
  INTO :NEW.GENREID
  FROM DUAL;
END;
/


CREATE SEQUENCE USER_SEQ;
CREATE OR REPLACE TRIGGER USER_AINC
BEFORE INSERT ON "USER"
FOR EACH ROW
BEGIN 
  SELECT USER_SEQ.NEXTVAL
  INTO :NEW.USERID
  FROM DUAL;
END;
/


CREATE SEQUENCE EVENT_SEQ;
CREATE OR REPLACE TRIGGER EVENT_AINC
BEFORE INSERT ON EVENT
FOR EACH ROW
BEGIN 
  SELECT EVENT_SEQ.NEXTVAL
  INTO :NEW.EVENTID
  FROM DUAL;
END;
/

CREATE SEQUENCE DISCTYPE_SEQ;
CREATE OR REPLACE TRIGGER DISCTYPE_AINC
BEFORE INSERT ON DISCTYPE
FOR EACH ROW
BEGIN 
  SELECT DISCTYPE_SEQ.NEXTVAL
  INTO :NEW.DISCTYPEID
  FROM DUAL;
END;
/

CREATE SEQUENCE PROBLEM_SEQ;
CREATE OR REPLACE TRIGGER PROBLEM_AINC
BEFORE INSERT ON PROBLEM
FOR EACH ROW
BEGIN 
  SELECT PROBLEM_SEQ.NEXTVAL
  INTO :NEW.PROBLEMID
  FROM DUAL;
END;
/

CREATE SEQUENCE CATEGORY_SEQ;
CREATE OR REPLACE TRIGGER CATEGORY_AINC
BEFORE INSERT ON CATEGORY
FOR EACH ROW
BEGIN 
  SELECT CATEGORY_SEQ.NEXTVAL
  INTO :NEW.CATEGORYID
  FROM DUAL;
END;
/

CREATE SEQUENCE DISC_SEQ;
CREATE OR REPLACE TRIGGER DISC_AINC
BEFORE INSERT ON DISC
FOR EACH ROW
BEGIN 
  SELECT DISC_SEQ.NEXTVAL
  INTO :NEW.DISCID
  FROM DUAL;
END;
/

CREATE SEQUENCE DISC_SEQ;
CREATE OR REPLACE TRIGGER DISC_AINC
BEFORE INSERT ON DISC
FOR EACH ROW
BEGIN 
  SELECT DISC_SEQ.NEXTVAL
  INTO :NEW.DISCID
  FROM DUAL;
END;
/

CREATE SEQUENCE ITEM_SEQ;
CREATE OR REPLACE TRIGGER ITEM_AINC
BEFORE INSERT ON ITEM
FOR EACH ROW
BEGIN 
  SELECT ITEM_SEQ.NEXTVAL
  INTO :NEW.ITEMID
  FROM DUAL;
END;
/

CREATE SEQUENCE TRANSACTION_SEQ;
CREATE OR REPLACE TRIGGER TRANSACTION_AINC
BEFORE INSERT ON TRANSACTION
FOR EACH ROW
BEGIN 
  SELECT TRANSACTION_SEQ.NEXTVAL
  INTO :NEW.TRANSACTIONID
  FROM DUAL;
END;
/

CREATE SEQUENCE PENALTY_SEQ;
CREATE OR REPLACE TRIGGER PENALTY_AINC
BEFORE INSERT ON PENALTY
FOR EACH ROW
BEGIN 
  SELECT PENALTY_SEQ.NEXTVAL
  INTO :NEW.PENALTYID
  FROM DUAL;
END;
/

CREATE SEQUENCE CATEGORYPENALTY_SEQ;
CREATE OR REPLACE TRIGGER CATEGORYPENALTY_AINC
BEFORE INSERT ON CATEGORYPENALTY
FOR EACH ROW
BEGIN 
  SELECT CATEGORYPENALTY_SEQ.NEXTVAL
  INTO :NEW.CATEGORYPENALTYID
  FROM DUAL;
END;
/

CREATE SEQUENCE MOVIE_SEQ;
CREATE OR REPLACE TRIGGER MOVIE_AINC
BEFORE INSERT ON MOVIE
FOR EACH ROW
BEGIN 
  SELECT MOVIE_SEQ.NEXTVAL
  INTO :NEW.MOVIEID
  FROM DUAL;
END;
/


-- TRIGGER --
CREATE OR REPLACE TRIGGER T01_USER_NOT_FOUND
BEFORE INSERT ON TRANSACTION
DECLARE 
  FOUND NUMBER;
BEGIN
  SELECT  COUNT(*) INTO FOUND 
